# an example of docker-compose to use with AWS ECS

version: '3'

services:
  janusgraph:
    image: janusgraph/janusgraph:0.4
    container_name: janusgraph
    # entrypoint: /bin/bash
    environment:
    ports:
      - "8182:8182"
    networks:
      - graph-network
    healthcheck:
      test: ["CMD", "bin/gremlin.sh", "-e", "scripts/remote-connect.groovy"]
      interval: 10s
      timeout: 30s
      retries: 3
    logging:
      driver: awslogs
      options: 
        awslogs-group: graph
        awslogs-region: us-west-2
        awslogs-stream-prefix: graph
  cassandra:
    image: cassandra:3
    container_name: jce-cassandra
    ports:
      - "9042:9042"
      - "9160:9160"
    networks:
      - graph-network
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.6.0
    container_name: jce-elastic
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "http.host=0.0.0.0"
      - "network.host=0.0.0.0"
      - "transport.host=127.0.0.1"
      - "cluster.name=docker-cluster"
      - "xpack.security.enabled=false"
      - "discovery.zen.minimum_master_nodes=1"
    logging:
      driver: awslogs
      options: 
        awslogs-group: elasticsearch
        awslogs-region: us-west-2
        awslogs-stream-prefix: graph
    ports:
      - "9200:9200"
    networks:
      - graph-network

networks:
  graph-network:
volumes:
  janusgraph-default-data:


# notes
# graph = JanusGraphFactory.open('conf/janusgraph-cql.properties')
# g = graph.traversal()
# connect to terminal: docker exec -it janusgraph /bin/bash
# mgmt.buildIndex('byAComposite', Vertex.class).addKey(name).buildCompositeIndex()
# ManagementSystem.awaitGraphIndexStatus(graph, 'byAComposite').call()
# mgmt.updateIndex(mgmt.getGraphIndex("byAComposite"), SchemaAction.REINDEX).get()