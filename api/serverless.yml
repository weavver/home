service: ${env:API_NAME}

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${env:API_STAGE}
  region: us-east-1

#websocketApiRouteSelectionExpression: $request.body.action
plugins:
  - serverless-plugin-typescript
  - serverless-plugin-include-dependencies
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-aws-documentation
  - serverless-domain-manager
  - serverless-offline
 # - serverless-websockets-plugin

resources:
  Resources:
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${env:AWS_API_GATEWAY_NAME}

custom:
  serverless-offline:
    httpsProtocol: "dev-certs"
    port: 3001

  customDomain:
    domainName: ${env:API_DOMAIN}
    certificateName: ${env:API_CERTIFICATE_NAME}
    basePath: ${env:API_STAGE}
    stage: ${self:provider.stage}
    createRoute53Record: false
    endpointType: edge

  documentation:
      api:
        info:
          version: "1"
          title: "Weavver Home - API"
          description: "This API basically replicates all functionality available on ${env:WEBSITE_DOMAIN}."
          termsOfService: ${env:WEBSITE_DOMAIN}
          contact:
            name: ${env:CONTACT_NAME_FULL}
            url: ${env:API_DOMAIN}
            # email: ""
          license:
            name: "MIT"
            url: "http://${env:WEBSITE_DOMAIN}"
      tags:
        -
          name: "Data Creation"
          description: "Services to create things"
        -
          name: "Some other tag"
          description: "A tag for other things"
      authorizers:
        -
          name: "MyCustomAuthorizer"
          description: "This is an error"
      #resources:
        #-
          #path: "cases"
          #description: "This is the description for cases."
        #-
          #path: "some/other/path"
          #description: "This is the description for some/other/path"

  environment:
      GREMLIN_ENDPOINT: ${env:GREMLIN_ENDPOINT}
      GREMLIN_DATABASE: ${env:GREMLIN_DATABASE}
      GREMLIN_PRIMARYKEY: ${env:GREMLIN_PRIMARYKEY}
      GREMLIN_COLLECTION: ${env:GREMLIN_COLLECTION}
      SENDGRID_KEY: ${env:SENDGRID_KEY}

package:
  excludeDevDependencies: false
  exclude:
    - node_modules/**
  include:
    - node_modules/@maxmind/**
    - node_modules/@sendgrid/**
    - node_modules/gremlin/**

functions:

  echo:
    handler: rest/echo/echo.handler
    events:
      - http:
          path: echo
          method: get
          cors: true
          documentation:
            summary: "/echo"
      - http:
          path: echo
          method: post
          cors: true
          documentation:
            summary: "/echo"
      - http:
          path: echo
          method: put
          cors: true
          documentation:
            summary: "/echo"

  identities_put:
    handler: rest/identities/identities_put.handler
    environment:
      GREMLIN_ENDPOINT: ${env:GREMLIN_ENDPOINT}
      GREMLIN_DATABASE: ${env:GREMLIN_DATABASE}
      GREMLIN_PRIMARYKEY: ${env:GREMLIN_PRIMARYKEY}
      GREMLIN_COLLECTION: ${env:GREMLIN_COLLECTION}
      TWILIO_ACCOUNTSID: ${env:TWILIO_ACCOUNTSID}
      TWILIO_AUTHTOKEN: ${env:TWILIO_AUTHTOKEN}
      SENDGRID_KEY: ${env:SENDGRID_KEY}
    events:
      - http:
          path: identities
          method: put
          cors: true
          documentation:
            summary: "PUT /identities"

  passwords_get:
    handler: rest/password/password_get.handler
    environment:
      GREMLIN_ENDPOINT: ${env:GREMLIN_ENDPOINT}
      GREMLIN_DATABASE: ${env:GREMLIN_DATABASE}
      GREMLIN_PRIMARYKEY: ${env:GREMLIN_PRIMARYKEY}
      GREMLIN_COLLECTION: ${env:GREMLIN_COLLECTION}
      COOKIE_DOMAIN: ${env:COOKIE_DOMAIN}
      API_VERSION: ${env:API_STAGE}
      SENDGRID_KEY: ${env:SENDGRID_KEY}
    events:
      - http:
          path: passwords
          method: get
          cors: true
          documentation:
            summary: "GET /password?email={email}"

  tokens_get:
    handler: rest/tokens/tokens_get.handler
    environment:
      GREMLIN_ENDPOINT: ${env:GREMLIN_ENDPOINT}
      GREMLIN_DATABASE: ${env:GREMLIN_DATABASE}
      GREMLIN_PRIMARYKEY: ${env:GREMLIN_PRIMARYKEY}
      GREMLIN_COLLECTION: ${env:GREMLIN_COLLECTION}
      COOKIE_DOMAIN: ${env:COOKIE_DOMAIN}
      API_VERSION: ${env:API_STAGE}
    events:
      - http:
          path: tokens
          method: get
          cors: true
          documentation:
            summary: "GET /tokens?username={username}&password={password}"

  tokens_del:
    handler: rest/tokens/tokens_del.handler
    environment:
      GREMLIN_ENDPOINT: ${env:GREMLIN_ENDPOINT}
      GREMLIN_DATABASE: ${env:GREMLIN_DATABASE}
      GREMLIN_PRIMARYKEY: ${env:GREMLIN_PRIMARYKEY}
      GREMLIN_COLLECTION: ${env:GREMLIN_COLLECTION}
    events:
      - http:
          path: tokens
          method: delete
          cors:
            origin: https://${env:WEBSITE_DOMAIN}
            allowCredentials: true
          documentation:
            summary: "/tokens delete"

  signout_get:
    handler: rest/signout_get.handler
    environment:
      GREMLIN_ENDPOINT: ${env:GREMLIN_ENDPOINT}
      GREMLIN_DATABASE: ${env:GREMLIN_DATABASE}
      GREMLIN_PRIMARYKEY: ${env:GREMLIN_PRIMARYKEY}
      GREMLIN_COLLECTION: ${env:GREMLIN_COLLECTION}
      COOKIE_DOMAIN: ${env:COOKIE_DOMAIN}
      API_VERSION: ${env:API_STAGE}
      WEBSITE_DOMAIN: ${env:WEBSITE_DOMAIN}
    events:
      - http:
          path: signout
          method: get
          cors: true
          documentation:
            summary: "GET /signout"

  graphql:
    handler: src/graphql/graphql.handler
    environment:
      GREMLIN_ENDPOINT: ${env:GREMLIN_ENDPOINT}
      GREMLIN_DATABASE: ${env:GREMLIN_DATABASE}
      GREMLIN_PRIMARYKEY: ${env:GREMLIN_PRIMARYKEY}
      GREMLIN_COLLECTION: ${env:GREMLIN_COLLECTION}
      COOKIE_DOMAIN: ${env:COOKIE_DOMAIN}
      API_VERSION: ${env:API_STAGE}
      WEBSITE_DOMAIN: ${env:WEBSITE_DOMAIN}
    events:
    - http:
        path: graphql
        method: post
        cors:
          origin: https://${env:WEBSITE_DOMAIN}
          allowCredentials: true
    - http:
        path: graphql
        method: get
        cors:
          origin: https://${env:WEBSITE_DOMAIN}
          allowCredentials: true